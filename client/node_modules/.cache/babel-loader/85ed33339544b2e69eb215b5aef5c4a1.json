{"ast":null,"code":"import { computed, flow, makeObservable, observable } from \"mobx\";\nimport Api from '../utils/Api';\nimport serv from '../../config';\n\nclass AuthStore {\n  constructor() {\n    this.token = null;\n    makeObservable(this);\n  }\n\n  register(nickname, password, phone, role, name, surname, address, darktheme) {\n    const {\n      token\n    } = new Api().post(serv + '/api/auth/register', {\n      nickname,\n      password,\n      phone,\n      role,\n      name,\n      surname,\n      address,\n      darktheme\n    });\n\n    if (token) {\n      this.token = token;\n    }\n  }\n\n  get user() {\n    if (!this.token) {\n      return null;\n    }\n\n    const [, encodedPayload] = this.token.split('.');\n\n    if (!encodedPayload) {\n      return null;\n    }\n\n    try {\n      return JSON.parse(window.atob(encodedPayload)).sub;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  get isLoggedIn() {\n    return Boolean(this.user);\n  }\n\n}\n\nAuthStore = decorate(AuthStore, {\n  token: observable,\n  register: flow,\n  user: computed,\n  isLoggedIn: computed\n});\nexport default new AuthStore();","map":{"version":3,"names":["computed","flow","makeObservable","observable","Api","serv","AuthStore","constructor","token","register","nickname","password","phone","role","name","surname","address","darktheme","post","user","encodedPayload","split","JSON","parse","window","atob","sub","e","isLoggedIn","Boolean","decorate"],"sources":["/media/vasya/Trash/files/Учеба/ШП/Выпускной проект/project/client/src/stores/AuthStore.js"],"sourcesContent":["import { computed, flow, makeObservable, observable } from \"mobx\";\nimport Api from '../utils/Api';\nimport serv from '../../config';\n\nclass AuthStore {\n    token = null;\n\n    constructor() {\n        makeObservable(this);\n    }\n\n    register(nickname, password, phone, role, name, surname, address, darktheme) {\n        const {token} = new Api().post(\n            serv+'/api/auth/register',\n            {nickname, password, phone, role, name, surname, address, darktheme}\n        );\n\n        if(token) {\n            this.token = token;\n        }\n    }\n\n    get user() {\n        if (!this.token) {\n          return null;\n        }\n    \n        const [, encodedPayload,] = this.token.split('.');\n    \n        if (!encodedPayload) {\n          return null;\n        }\n    \n        try {\n          return JSON.parse(window.atob(encodedPayload)).sub;\n        } catch(e) {\n          return null\n        }\n      }\n\n    get isLoggedIn() {\n        return Boolean(this.user);\n      }\n}\n\nAuthStore = decorate(AuthStore, {\n    token: observable,\n    register: flow,\n    user: computed,\n    isLoggedIn: computed\n})\n\nexport default new AuthStore();\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,IAAnB,EAAyBC,cAAzB,EAAyCC,UAAzC,QAA2D,MAA3D;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,IAAP,MAAiB,cAAjB;;AAEA,MAAMC,SAAN,CAAgB;EAGZC,WAAW,GAAG;IAAA,KAFdC,KAEc,GAFN,IAEM;IACVN,cAAc,CAAC,IAAD,CAAd;EACH;;EAEDO,QAAQ,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0DC,SAA1D,EAAqE;IACzE,MAAM;MAACT;IAAD,IAAU,IAAIJ,GAAJ,GAAUc,IAAV,CACZb,IAAI,GAAC,oBADO,EAEZ;MAACK,QAAD;MAAWC,QAAX;MAAqBC,KAArB;MAA4BC,IAA5B;MAAkCC,IAAlC;MAAwCC,OAAxC;MAAiDC,OAAjD;MAA0DC;IAA1D,CAFY,CAAhB;;IAKA,IAAGT,KAAH,EAAU;MACN,KAAKA,KAAL,GAAaA,KAAb;IACH;EACJ;;EAEO,IAAJW,IAAI,GAAG;IACP,IAAI,CAAC,KAAKX,KAAV,EAAiB;MACf,OAAO,IAAP;IACD;;IAED,MAAM,GAAGY,cAAH,IAAsB,KAAKZ,KAAL,CAAWa,KAAX,CAAiB,GAAjB,CAA5B;;IAEA,IAAI,CAACD,cAAL,EAAqB;MACnB,OAAO,IAAP;IACD;;IAED,IAAI;MACF,OAAOE,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYL,cAAZ,CAAX,EAAwCM,GAA/C;IACD,CAFD,CAEE,OAAMC,CAAN,EAAS;MACT,OAAO,IAAP;IACD;EACF;;EAEW,IAAVC,UAAU,GAAG;IACb,OAAOC,OAAO,CAAC,KAAKV,IAAN,CAAd;EACD;;AAtCS;;AAyChBb,SAAS,GAAGwB,QAAQ,CAACxB,SAAD,EAAY;EAC5BE,KAAK,EAAEL,UADqB;EAE5BM,QAAQ,EAAER,IAFkB;EAG5BkB,IAAI,EAAEnB,QAHsB;EAI5B4B,UAAU,EAAE5B;AAJgB,CAAZ,CAApB;AAOA,eAAe,IAAIM,SAAJ,EAAf"},"metadata":{},"sourceType":"module"}
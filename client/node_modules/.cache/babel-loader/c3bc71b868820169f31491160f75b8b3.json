{"ast":null,"code":"import { computed, flow, makeObservable, observable } from \"mobx\";\nimport Api from '../utils/Api'; //import serv from '../../config';\n\nclass AuthStore {\n  constructor() {\n    this.token = null;\n    this.message = '';\n    makeObservable(this, {\n      message: observable,\n      token: observable,\n      register: flow,\n      user: computed,\n      isLoggedIn: computed\n    });\n  }\n\n  async register(nickname, password, phone, role, name, surname, address, darktheme) {\n    const user = {\n      nickname: nickname,\n      password: password,\n      phone: phone,\n      role: role,\n      name: name,\n      surname: surname,\n      address: address,\n      darktheme: darktheme\n    };\n    const response = await fetch('http://localhost:8080/api/auth/register', {\n      mode: 'no-cors',\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: JSON.stringify(user)\n    });\n    const result = await response.json();\n    console.log(result.message);\n    this.message = result.message;\n    return result.message; //return result;\n    //console.log(response.status);\n\n    /*const  = new Api().post(\n        'http://localhost:8080/api/auth/register',\n        {nickname, password, phone, role, name, surname, address, darktheme}\n    );\n    console.log(token);*/\n    //const token = null;\n\n    /*if(token) {\n        this.token = token;\n    }*/\n  }\n\n  login(nickname, password, phone, role, name, surname, address, darktheme) {\n    const {\n      token\n    } = new Api().post('http://localhost:8080/api/auth/register', {\n      nickname,\n      password,\n      phone,\n      role,\n      name,\n      surname,\n      address,\n      darktheme\n    });\n    console.log(token);\n\n    if (token) {\n      this.token = token;\n    }\n  }\n\n  get user() {\n    if (!this.token) {\n      return null;\n    }\n\n    const [, encodedPayload] = this.token.split('.');\n\n    if (!encodedPayload) {\n      return null;\n    }\n\n    try {\n      return JSON.parse(window.atob(encodedPayload)).sub;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  get isLoggedIn() {\n    return Boolean(this.user);\n  }\n\n}\n\nexport default new AuthStore();","map":{"version":3,"names":["computed","flow","makeObservable","observable","Api","AuthStore","constructor","token","message","register","user","isLoggedIn","nickname","password","phone","role","name","surname","address","darktheme","response","fetch","mode","method","headers","body","JSON","stringify","result","json","console","log","login","post","encodedPayload","split","parse","window","atob","sub","e","Boolean"],"sources":["/media/vasya/Trash/files/Учеба/ШП/Выпускной проект/project/client/src/stores/AuthStore.js"],"sourcesContent":["import { computed, flow, makeObservable, observable } from \"mobx\";\nimport Api from '../utils/Api';\n//import serv from '../../config';\n\nclass AuthStore {\n    token = null;\n    message = '';\n    constructor() {\n        makeObservable(this, {\n            message: observable,\n            token: observable,\n            register: flow,\n            user: computed,\n            isLoggedIn: computed\n        });\n    }\n\n    async register(nickname, password, phone, role, name, surname, address, darktheme) {\n        const user = {\n            nickname: nickname, password: password, phone: phone,role:role,name:name,surname:surname,address:address,darktheme:darktheme\n          };\n        const response = await fetch('http://localhost:8080/api/auth/register', {\n            mode: 'no-cors',\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json;charset=utf-8'\n            },\n            body: JSON.stringify(user)\n        });\n        const result = await response.json();\n        console.log(result.message);\n        this.message = result.message;\n        return result.message;\n        //return result;\n        //console.log(response.status);\n        /*const  = new Api().post(\n            'http://localhost:8080/api/auth/register',\n            {nickname, password, phone, role, name, surname, address, darktheme}\n        );\n        console.log(token);*/\n        //const token = null;\n        /*if(token) {\n            this.token = token;\n        }*/\n    }\n\n    login(nickname, password, phone, role, name, surname, address, darktheme) {\n        const {token} = new Api().post(\n            'http://localhost:8080/api/auth/register',\n            {nickname, password, phone, role, name, surname, address, darktheme}\n        );\n        console.log(token);\n        if(token) {\n            this.token = token;\n        }\n    }\n\n    get user() {\n        if (!this.token) {\n          return null;\n        }\n    \n        const [, encodedPayload,] = this.token.split('.');\n    \n        if (!encodedPayload) {\n          return null;\n        }\n    \n        try {\n          return JSON.parse(window.atob(encodedPayload)).sub;\n        } catch(e) {\n          return null\n        }\n      }\n\n    get isLoggedIn() {\n        return Boolean(this.user);\n      }\n}\n\nexport default new AuthStore();\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,IAAnB,EAAyBC,cAAzB,EAAyCC,UAAzC,QAA2D,MAA3D;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CACA;;AAEA,MAAMC,SAAN,CAAgB;EAGZC,WAAW,GAAG;IAAA,KAFdC,KAEc,GAFN,IAEM;IAAA,KADdC,OACc,GADJ,EACI;IACVN,cAAc,CAAC,IAAD,EAAO;MACjBM,OAAO,EAAEL,UADQ;MAEjBI,KAAK,EAAEJ,UAFU;MAGjBM,QAAQ,EAAER,IAHO;MAIjBS,IAAI,EAAEV,QAJW;MAKjBW,UAAU,EAAEX;IALK,CAAP,CAAd;EAOH;;EAEa,MAARS,QAAQ,CAACG,QAAD,EAAWC,QAAX,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0DC,SAA1D,EAAqE;IAC/E,MAAMT,IAAI,GAAG;MACTE,QAAQ,EAAEA,QADD;MACWC,QAAQ,EAAEA,QADrB;MAC+BC,KAAK,EAAEA,KADtC;MAC4CC,IAAI,EAACA,IADjD;MACsDC,IAAI,EAACA,IAD3D;MACgEC,OAAO,EAACA,OADxE;MACgFC,OAAO,EAACA,OADxF;MACgGC,SAAS,EAACA;IAD1G,CAAb;IAGA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAD,EAA4C;MACpEC,IAAI,EAAE,SAD8D;MAEpEC,MAAM,EAAE,MAF4D;MAGpEC,OAAO,EAAE;QACP,gBAAgB;MADT,CAH2D;MAMpEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,IAAf;IAN8D,CAA5C,CAA5B;IAQA,MAAMkB,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAArB;IACAC,OAAO,CAACC,GAAR,CAAYH,MAAM,CAACpB,OAAnB;IACA,KAAKA,OAAL,GAAeoB,MAAM,CAACpB,OAAtB;IACA,OAAOoB,MAAM,CAACpB,OAAd,CAf+E,CAgB/E;IACA;;IACA;AACR;AACA;AACA;AACA;IACQ;;IACA;AACR;AACA;EACK;;EAEDwB,KAAK,CAACpB,QAAD,EAAWC,QAAX,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0DC,SAA1D,EAAqE;IACtE,MAAM;MAACZ;IAAD,IAAU,IAAIH,GAAJ,GAAU6B,IAAV,CACZ,yCADY,EAEZ;MAACrB,QAAD;MAAWC,QAAX;MAAqBC,KAArB;MAA4BC,IAA5B;MAAkCC,IAAlC;MAAwCC,OAAxC;MAAiDC,OAAjD;MAA0DC;IAA1D,CAFY,CAAhB;IAIAW,OAAO,CAACC,GAAR,CAAYxB,KAAZ;;IACA,IAAGA,KAAH,EAAU;MACN,KAAKA,KAAL,GAAaA,KAAb;IACH;EACJ;;EAEO,IAAJG,IAAI,GAAG;IACP,IAAI,CAAC,KAAKH,KAAV,EAAiB;MACf,OAAO,IAAP;IACD;;IAED,MAAM,GAAG2B,cAAH,IAAsB,KAAK3B,KAAL,CAAW4B,KAAX,CAAiB,GAAjB,CAA5B;;IAEA,IAAI,CAACD,cAAL,EAAqB;MACnB,OAAO,IAAP;IACD;;IAED,IAAI;MACF,OAAOR,IAAI,CAACU,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYJ,cAAZ,CAAX,EAAwCK,GAA/C;IACD,CAFD,CAEE,OAAMC,CAAN,EAAS;MACT,OAAO,IAAP;IACD;EACF;;EAEW,IAAV7B,UAAU,GAAG;IACb,OAAO8B,OAAO,CAAC,KAAK/B,IAAN,CAAd;EACD;;AAzES;;AA4EhB,eAAe,IAAIL,SAAJ,EAAf"},"metadata":{},"sourceType":"module"}
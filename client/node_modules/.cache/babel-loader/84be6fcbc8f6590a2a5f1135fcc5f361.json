{"ast":null,"code":"import { computed, flow, makeObservable, observable } from \"mobx\";\nimport Api from '../utils/Api'; //import serv from '../../config';\n\nclass AuthStore {\n  constructor() {\n    this.token = null;\n    makeObservable(this, {\n      token: observable,\n      register: flow,\n      user: computed,\n      isLoggedIn: computed\n    });\n  }\n\n  register(nickname, password, phone, role, name, surname, address, darktheme) {\n    const {\n      token\n    } = new Api().post(serv + 'http://localhost:8080/api/auth/register', {\n      nickname,\n      password,\n      phone,\n      role,\n      name,\n      surname,\n      address,\n      darktheme\n    });\n\n    if (token) {\n      this.token = token;\n    }\n  }\n\n  get user() {\n    if (!this.token) {\n      return null;\n    }\n\n    const [, encodedPayload] = this.token.split('.');\n\n    if (!encodedPayload) {\n      return null;\n    }\n\n    try {\n      return JSON.parse(window.atob(encodedPayload)).sub;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  get isLoggedIn() {\n    return Boolean(this.user);\n  }\n\n}\n\nexport default new AuthStore();","map":{"version":3,"names":["computed","flow","makeObservable","observable","Api","AuthStore","constructor","token","register","user","isLoggedIn","nickname","password","phone","role","name","surname","address","darktheme","post","serv","encodedPayload","split","JSON","parse","window","atob","sub","e","Boolean"],"sources":["/media/vasya/Trash/files/Учеба/ШП/Выпускной проект/project/client/src/stores/AuthStore.js"],"sourcesContent":["import { computed, flow, makeObservable, observable } from \"mobx\";\nimport Api from '../utils/Api';\n//import serv from '../../config';\n\nclass AuthStore {\n    token = null;\n\n    constructor() {\n        makeObservable(this, {\n            token: observable,\n            register: flow,\n            user: computed,\n            isLoggedIn: computed\n        });\n    }\n\n    register(nickname, password, phone, role, name, surname, address, darktheme) {\n        const {token} = new Api().post(\n            serv+'http://localhost:8080/api/auth/register',\n            {nickname, password, phone, role, name, surname, address, darktheme}\n        );\n\n        if(token) {\n            this.token = token;\n        }\n    }\n\n    get user() {\n        if (!this.token) {\n          return null;\n        }\n    \n        const [, encodedPayload,] = this.token.split('.');\n    \n        if (!encodedPayload) {\n          return null;\n        }\n    \n        try {\n          return JSON.parse(window.atob(encodedPayload)).sub;\n        } catch(e) {\n          return null\n        }\n      }\n\n    get isLoggedIn() {\n        return Boolean(this.user);\n      }\n}\n\nexport default new AuthStore();\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,IAAnB,EAAyBC,cAAzB,EAAyCC,UAAzC,QAA2D,MAA3D;AACA,OAAOC,GAAP,MAAgB,cAAhB,C,CACA;;AAEA,MAAMC,SAAN,CAAgB;EAGZC,WAAW,GAAG;IAAA,KAFdC,KAEc,GAFN,IAEM;IACVL,cAAc,CAAC,IAAD,EAAO;MACjBK,KAAK,EAAEJ,UADU;MAEjBK,QAAQ,EAAEP,IAFO;MAGjBQ,IAAI,EAAET,QAHW;MAIjBU,UAAU,EAAEV;IAJK,CAAP,CAAd;EAMH;;EAEDQ,QAAQ,CAACG,QAAD,EAAWC,QAAX,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,OAAxC,EAAiDC,OAAjD,EAA0DC,SAA1D,EAAqE;IACzE,MAAM;MAACX;IAAD,IAAU,IAAIH,GAAJ,GAAUe,IAAV,CACZC,IAAI,GAAC,yCADO,EAEZ;MAACT,QAAD;MAAWC,QAAX;MAAqBC,KAArB;MAA4BC,IAA5B;MAAkCC,IAAlC;MAAwCC,OAAxC;MAAiDC,OAAjD;MAA0DC;IAA1D,CAFY,CAAhB;;IAKA,IAAGX,KAAH,EAAU;MACN,KAAKA,KAAL,GAAaA,KAAb;IACH;EACJ;;EAEO,IAAJE,IAAI,GAAG;IACP,IAAI,CAAC,KAAKF,KAAV,EAAiB;MACf,OAAO,IAAP;IACD;;IAED,MAAM,GAAGc,cAAH,IAAsB,KAAKd,KAAL,CAAWe,KAAX,CAAiB,GAAjB,CAA5B;;IAEA,IAAI,CAACD,cAAL,EAAqB;MACnB,OAAO,IAAP;IACD;;IAED,IAAI;MACF,OAAOE,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,IAAP,CAAYL,cAAZ,CAAX,EAAwCM,GAA/C;IACD,CAFD,CAEE,OAAMC,CAAN,EAAS;MACT,OAAO,IAAP;IACD;EACF;;EAEW,IAAVlB,UAAU,GAAG;IACb,OAAOmB,OAAO,CAAC,KAAKpB,IAAN,CAAd;EACD;;AA3CS;;AA8ChB,eAAe,IAAIJ,SAAJ,EAAf"},"metadata":{},"sourceType":"module"}